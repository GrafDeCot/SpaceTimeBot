class Research {
	constructor (id, name, desc, func, time, cost, money) {
		this.id = id;
		this.name = name;
		this.desc = desc;
		this.func = func;
		this.time = time;
		this.cost = cost;
		this.money = money;
		this.children = [];
	}
	moneyCost() {
		return this.money > 0 ? money2text(this.money) : "";
	}

	add (...children) {
		for (let child of children) {
			this.children.push(child);
		}
		return this;
	}

	addNext (child) {
		this.children.push(child);
		return this.children[this.children.length-1];
	}

	traverse (callback, traversal = Research.Traversal.DepthFirst, cursience = [], prefix = "") {
		traversal.call(this, callback, cursience, prefix);
		return this;
	}

	reduce (callback, initial, mode, cursience = []) {
		let acc = initial;
		this.traverse((n, p) => {acc = callback(acc, n, cursience, p)}, mode, cursience);
		return acc;
	}

	every (callback) {
		return this.reduce((a, n) => a && callback(n), true);
	}

	some (callback) {
		return this.reduce((a, n) => a || callback(n), false);
	}

	find (callback, mode) {
		return this.reduce((a, n) => a || (callback(n)? n: false), false, mode);
	}

	includes (value) {
		return this.some(n => n.value === value);
	}

}


Research.Traversal = {
	//BreadthFirst: function(callback) {
	//	let nodes = [this];
	//	while (nodes.length > 0) {
	//		const current = nodes.shift();
	//		callback(current);
	//		nodes = nodes.concat(current.children,  Research.Traversal.BreadthFirst);
	//	}
	//},
	DepthFirst: function(callback, cursience, prefix = "") {
		callback(this, prefix);
		if (prefix.length >= 1) {
			if (prefix[prefix.length - 1] == "‚îú") prefix = prefix.slice(0, -1) + "‚îÇ";
			if (prefix[prefix.length - 1] == "‚îî") prefix = prefix.slice(0, -1) + " ";
		}
		for (let i = 0; i < this.children.length; i++) {
			let pref = prefix;
			if (i == this.children.length-1) pref += " ‚îî";
			else pref += " ‚îú"
			this.children[i].traverse(callback, Research.Traversal.DepthFirst, cursience, pref);
		}
	},
	Actual: function(callback, cursience, prefix = "") {
		const er = cursience.find(cr => cr.id == this.id);
		if (!er) {
			callback(this, prefix);
		} else if (er.time == 0) {
			this.children.forEach(n => n.traverse(callback, Research.Traversal.Actual, cursience));
		} else callback(this, prefix);
	}
};


const printSienceTree = function(ret, res, cursience, prefix) {
	const with_price = false;
	let pref_main = prefix;
	if (with_price)
		if (pref_main.length >= 1)
			pref_main = pref_main.slice(0, -1) + "‚îú";
		
	ret += "<code>" + pref_main;
	const er = cursience.find(cr => cr.id == res.id);
	if (er) ret += er.time > 0 ? "‚è≥" : "‚úÖ";
	else ret += "üîò";
	//ret += res.time > 0 ? (res.active ? "‚è≥" : "üîò") : "‚úÖ";
	ret += "</code>";
	ret += `${res.name}`;
	ret += '\n';
	if (with_price){
		let pref_price = "<code>" + prefix;
		if (pref_price.length >= 1) {
			if (pref_price[pref_price.length - 1] == "‚îú") pref_price = pref_price.slice(0, -1) + "‚îÇ";
		} else
			pref_price = " ‚îÇ";
		ret += pref_price + "   ";
		ret += "  ";
		ret += "</code>" + `${food2text(res.cost)} ${res.moneyCost()} ${time2text(res.time)}`;
		ret += '\n';
	}
	return ret;
}

const getSienceButtons = function(a, r) {
	a.push(r.name);
	return a;
}

const printSienceDetail = function(a, r, cursience) {
	a += `<b>${r.name}</b> - ${food2text(r.cost)} ${r.moneyCost()} ${time2text(r.time)}\n`;
	const er = cursience.find(cr => cr.id == r.id);
	if (er) {
		if (er.time > 0)
			a += `    ‚û°Ô∏è –∏—Å—Å–ª–µ–¥—É–µ—Ç—Å—è, –æ—Å—Ç–∞–ª–æ—Å—å ${time2text(er.time)}\n`;
	}
	a += ``;
	a += `    ${r.desc}\n`;
	return a;
}


const SieceTree = function () {
	let s = new Research(1, "üåç–†–∞–∑–≤–µ–¥–∫–∞ –ø–ª–∞–Ω–µ—Ç—ã", "–ò—Å—Å–ª–µ–¥—É–µ—Ç –ø–ª–∞–Ω–µ—Ç—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–∑–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤, –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤—É üè≠–ó–∞–≤–æ–¥–∞", "enable_factory", 1000, 100000, 0);
	s.addNext(new Research(2, "üîã–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã", "–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤—É üîã–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä–æ–≤", "enable_accum", 1000, 120000, 0)).
	  addNext(new Research(3, "üîå–≠–∫–æ–Ω–æ–º–∏—è —ç–Ω–µ—Ä–≥–∏–∏", "–ù–∞ 10% —Å–æ–∫—Ä–∞—â–∞–µ—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞", "eco_power", 10000, 1500000, 1000)).
	  //add(new Research(4, "–ù–∞–ª–æ–≥–∏", "–î–æ–±–∞–≤–ª—è–µ—Ç +2üí∞ –∑–∞ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å –±–∞–∑—ã", "more_taxes", 80000, 1300000)).
	  addNext(new Research(5, "üîå–≠–∫–æ–Ω–æ–º–∏—è —ç–Ω–µ—Ä–≥–∏–∏ 2", "–ù–∞ 10% —Å–æ–∫—Ä–∞—â–∞–µ—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞", "eco_power", 10000, 1800000, 3000)).
	  addNext(new Research(6, "üîå–≠–∫–æ–Ω–æ–º–∏—è —ç–Ω–µ—Ä–≥–∏–∏ 3", "–ù–∞ 10% —Å–æ–∫—Ä–∞—â–∞–µ—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞", "eco_power", 10000, 2000000, 10000)).
	  addNext(new Research(7, "üîå–≠–∫–æ–Ω–æ–º–∏—è —ç–Ω–µ—Ä–≥–∏–∏ 4", "–ù–∞ 10% —Å–æ–∫—Ä–∞—â–∞–µ—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞", "eco_power", 10000, 2200000, 40000));
	s.children[0].addNext(new Research(10,"üí∏–¢–æ—Ä–≥–æ–≤–ª—è", "–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ üìà–ë–∏—Ä–∂–µ", "enable_trading", 2000, 200000, 0));
	s.children[0].addNext(new Research(9, "üöÄ–ö–æ—Ä–∞–±–ª–∏", "–û—Ç–∫—Ä—ã–≤–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –ø–æ—Å—Ç—Ä–æ–π–∫–µ üèó–í–µ—Ä—Ñ—å", "enable_ships", 2000,300000, 1000)).
	  addNext(new Research(8, "üîã–£–ª—É—á—à–µ–Ω—ã–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã", "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —ë–º–∫–æ—Å—Ç—å –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–æ–≤ –Ω–∞ 20%", "upgrade_accum", 5000, 100000, 4000)).
	  addNext(new Research(17, "üîã–£–ª—É—á—à–µ–Ω—ã–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã 2", "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —ë–º–∫–æ—Å—Ç—å –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–æ–≤ –Ω–∞ 20%", "upgrade_accum", 15000, 100000, 12000)).
	  addNext(new Research(18, "üîã–£–ª—É—á—à–µ–Ω—ã–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã 3", "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —ë–º–∫–æ—Å—Ç—å –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–æ–≤ –Ω–∞ 20%", "upgrade_accum", 15000, 100000, 32000));
	s.addNext(new Research(11, "üõ†–ë—ã—Å—Ç—Ä–æ–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ", "–í 2 —Ä–∞–∑–∞ —É—Å–∫–æ—Ä—è–µ—Ç –ø–æ—Å—Ç—Ä–æ–π–∫—É –∑–¥–∞–Ω–∏–π", "fastbuild", 4000, 1000000, 5000)).
	  add(new Research(12, "üì¶–ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ", "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –æ–±—ä—ë–º —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ 2 —Ä–∞–∑–∞", "upgrade_capacity", 5000, 2000000, 20000)).
	  addNext(new Research(13, "üõ†–ë—ã—Å—Ç—Ä–æ–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ 2", "–ù–∞ 50% —É—Å–∫–æ—Ä—è–µ—Ç –ø–æ—Å—Ç—Ä–æ–π–∫—É –∑–¥–∞–Ω–∏–π", "fastbuild", 10000, 2000000, 10000)).
	  add(new Research(14, "üì¶–ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ 2", "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –æ–±—ä—ë–º —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ 2 —Ä–∞–∑–∞", "upgrade_capacity", 15000, 4000000, 50000)).
	  addNext(new Research(15, "üõ†–ë—ã—Å—Ç—Ä–æ–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ 3", "–ù–∞ 30% —É—Å–∫–æ—Ä—è–µ—Ç –ø–æ—Å—Ç—Ä–æ–π–∫—É –∑–¥–∞–Ω–∏–π", "fastbuild", 18000, 4000000, 15000)).
	  add(new Research(16, "üì¶–ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ 3", "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –æ–±—ä—ë–º —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ 2 —Ä–∞–∑–∞", "upgrade_capacity", 20000, 8000000, 120000));
	return s;
}();


