// –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –∫–æ—Ä–∞–±–ª—è
class Ship {
	constructor(){
		this.count = 0;
	}
	load(o) {
		for (const [key, value] of Object.entries(o)) {
			this[key] = value;
		}
	}
	name() {return "";}
	description() {return "";}
	capacity() {return 0;}
	energy() {return 0;}
	health() {return 1;}
	armor() {return 0;}
	attack() {return 0;}
	damage() {return {b:1, d:8}}
	price() {return 0;}
	info(detail) {
		let msg = `<b>${this.name()}:</b> ${this.count} —à—Ç.\n`
		if (detail) {
			msg += `  ${this.description()}\n`;
			msg += `  –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: ${this.capacity()}üì¶\n`;
			msg += `  —ç–Ω–µ—Ä–≥–∏—è –ø—É—Å–∫–∞: ${this.energy()}üîã\n`;
		}
		return msg;
	}
}

class TradeShip extends Ship {
	name() {return "–ì—Ä—É–∑–æ–≤–∏–∫";}
	description() {return "–¢–æ—Ä–≥–æ–≤—ã–π –∫–æ—Ä–∞–±–ª—å";}
	energy() {return 100;}
	health() {return 100;}
	armor() {return 5;}
	capacity() {return 10;}
	price() {return 100;}
}

class SmallShip extends Ship {
	name() {return "–ú–∞–ª—é—Ç–∫–∞";}
	description() {return "–ö–æ—Ä–∞–±–ª—å –æ–±—â–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è";}
	energy() {return 10;}
	health() {return 10;}
	armor() {return 1;}
	capacity() {return 1;}
	price() {return 10;}
}

function ShipModels() {return [new TradeShip(), new SmallShip()]};

const ShipsDescription = function() {
	let msg = "\n<b> ‚úàÔ∏è –ú–æ–¥–µ–ª–∏ –∫–æ—Ä–∞–±–ª–µ–π ‚úàÔ∏è </b>\n";
	for (const s of ShipModels()) {
		msg += `<b>${s.name()}:</b> ${s.description()}\n`;
		msg += `  –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: ${s.capacity()}üì¶\n`;
		msg += `  —ç–Ω–µ—Ä–≥–∏—è –ø—É—Å–∫–∞: ${s.energy()}üîã\n`;
		msg += `  c—Ç–æ–∏–º–æ—Å—Ç—å: `;
		for(let i=0; i<Resources.length; i++) msg += getResourceCount(i, s.price());
		msg += "\n";
		msg += `  –≤—Ä–µ–º—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞: ${time2text(s.price()*Resources.length)}\n`;
	}
	return msg;
}();
