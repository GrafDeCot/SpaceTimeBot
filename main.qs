buttonSave["clicked()"].connect(on_buttonSave_clicked);
Telegram.clearCommands();
Telegram.disablePassword();
Telegram.addCommand("–ø–ª–∞–Ω–µ—Ç–∞üåç/–∏–Ω—Ñ–∞üèô", "planet_info");
Telegram.addCommand("–ø–ª–∞–Ω–µ—Ç–∞üåç/—Å—Ç—Ä–æ–∏—Ç—å —à–∞—Ö—Ç—É‚õè", "build_plant");
Telegram.addCommand("–∫–∞—Ä—Ç–∞üåå", "map_info");

Telegram["receiveCommand"].connect(function(id, cmd, script) {this[script](id);});
Telegram["receiveMessage"].connect(received);
Telegram["connected"].connect(telegramConnect);
Telegram["disconnected"].connect(telegramDisconnect);
Telegram.start("733272349:AAFUM4UUYlKepYilMt2q3s27g5L5sAoEmVE");

let timer = new QTimer();
timer["timeout"].connect(timerDone);
timer.start(1000);

// –®–∞—Ö—Ç–∞
class Plant {
	constructor(id){
		this.level = 0;
		this.build_progress = 0;
		this.chat_id = id;
	}
	load(o) {
		print("load");
		for (const [key, value] of Object.entries(o)) {
			if (typeof value == 'object') {
				this[key].load(value);
			} else {
				this[key] = value;
			}
		}
	}
	build() {
		if (this.build_progress == 0) {
			this.build_progress = 10*(this.level*this.level+1);
			return true;
		} else {
			return false;
		}
	}
	step() { // —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π timerDone
		if (this.build_progress > 0) {
			this.build_progress -= 1;
			//print(`build=${this.build_progress}`)
			if (this.build_progress == 0) {
				this.level += 1;
				Telegram.send(this.chat_id, `–®–∞—Ö—Ç–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞`);
			}
		}
	}
	cost() {
		return (this.level*this.level*this.level*20 + 100);
	}
}

// –ü–ª–∞–Ω–µ—Ç–∞
class Planet {
	constructor(id){
		this.money = 200;
		this.plant = new Plant(id);
		this.chat_id = id;
	}
	load(o) {
		for (const [key, value] of Object.entries(o)) {
			print(typeof value);
			if (typeof value == 'object') {
				this[key].load(value);
			} else {
				this[key] = value;
			}
		}
	}
	info() { // –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç—ã
		let msg =  `–î–µ–Ω—å–≥–∏ = ${this.money}üí∞\n`;
		msg += `–®–∞—Ö—Ç–∞: –¥–æ—Ö–æ–¥ +${this.plant.level}üí∞‚è≥\n`;
		msg += `–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å: –¥–æ—Ö–æ–¥ +${this.plant.level+1}üí∞‚è≥\n`;
		msg += `–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å—Ç—Ä–æ–π–∫–∏: ${this.plant.cost()}üí∞\n`;
		if (this.plant.build_progress > 0) msg += `–ò–¥—ë—Ç —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ, –æ—Å—Ç–∞–ª–æ—Å—å - ${this.plant.build_progress}üõ†`;
		Telegram.send(this.chat_id, msg);
	}
	step() { // —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π timerDone
		this.plant.step();
		this.money += this.plant.level;
	}
	buildPlant() { // –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —à–∞—Ö—Ç—É
		if (this.money >= this.plant.cost()) {
			if (this.plant.build()) {
				this.money -= this.plant.cost();
				Telegram.send(this.chat_id, "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –Ω–∞—á–∞–ª–æ—Å—å");
			} else {
				Telegram.send(this.chat_id, `–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –µ—â—ë –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –æ—Å—Ç–∞–ª–æ—Å—å - ${this.plant.build_progress}üõ†`);
			}
		} else {
			Telegram.send(this.chat_id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥");
		}
	}
}


///=======================================
 // –ó–¥–µ—Å—å –≤—Å—è –ë–î
let Users = loadUsers('[]');

function telegramConnect() {
	Telegram.sendAll("Server started");
	print("telegram bot connected");
}

function telegramDisconnect() {
	print("warning, telegram bot disconnected");
}

function timerDone() {
	for (var value of Users.values()) {
		value.step();
	}
}

function received(chat_id, msg) {
	print(msg);
	if (!Users.has(chat_id)) {
		Users.set(chat_id, new Planet(chat_id));
	}
}

function planet_info(chat_id) {
	Users.get(chat_id).info();
}

function build_plant(chat_id) {
	let p = Users.get(chat_id);
	p.buildPlant();
	Users.set(chat_id, p);
}

function map_info(chat_id) {
	let i = 10;
	let msg = "–î—Ä—É–≥–∏–µ –ø–ª–∞–Ω–µ—Ç—ã:\n";
	for (var [key, value] of Users) {
		msg += `–ü–ª–∞–Ω–µ—Ç–∞ ‚Ññ${key}: –¥–µ–Ω—å–≥–∏ ${value.money}, —à–∞—Ö—Ç–∞ ${value.plant.level}\n`;
	}
	Telegram.send(chat_id, msg);
}

function on_buttonSave_clicked() {
	let a = [];
	for (var value of Users.values()) {
		a.push(value);
	}
	print(JSON.stringify(a));
}

function loadUsers(data) {
	let m = new Map();
	const arr = JSON.parse(data);
	arr.forEach(function(item) {
		let p = new Planet(item.chat_id);
		p.load(item);
  		m.set(item.chat_id, p);
	});
	return m;
}
